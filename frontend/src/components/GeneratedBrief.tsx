import React, { useState } from 'react';
import { motion } from 'framer-motion';
import { 
  DocumentTextIcon, 
  ArrowDownTrayIcon, 
  ArrowPathIcon,
  ClipboardDocumentIcon,
  CheckIcon
} from '@heroicons/react/24/outline';
import { BriefType } from '../types';
import toast from 'react-hot-toast';

interface GeneratedBriefProps {
  content: string;
  briefType: BriefType;
  onReset: () => void;
}

const GeneratedBrief: React.FC<GeneratedBriefProps> = ({ content, briefType, onReset }) => {
  const [copied, setCopied] = useState(false);

  const handleCopy = () => {
    navigator.clipboard.writeText(content);
    setCopied(true);
    toast.success('Brief copied to clipboard!');
    setTimeout(() => setCopied(false), 2000);
  };

  const handleDownload = () => {
    const blob = new Blob([content], { type: 'text/plain' });
    const url = window.URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `${briefType}_brief_${new Date().toISOString().split('T')[0]}.txt`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    window.URL.revokeObjectURL(url);
    toast.success('Brief downloaded!');
  };

  return (
    <motion.div
      initial={{ opacity: 0, y: 20 }}
      animate={{ opacity: 1, y: 0 }}
      className="bg-white rounded-2xl shadow-xl overflow-hidden"
    >
      {/* Header */}
      <div className="bg-gradient-to-r from-lexicon-primary to-lexicon-secondary p-6">
        <div className="flex items-center justify-between">
          <div className="flex items-center space-x-3">
            <DocumentTextIcon className="w-8 h-8 text-white" />
            <div>
              <h2 className="text-2xl font-bold text-white">Generated Brief</h2>
              <p className="text-blue-200">
                {briefType.replace(/_/g, ' ').replace(/\b\w/g, l => l.toUpperCase())}
              </p>
            </div>
          </div>
          
          <div className="flex space-x-3">
            <button
              onClick={handleCopy}
              className="p-3 bg-white/20 hover:bg-white/30 rounded-lg transition-colors"
              title="Copy to clipboard"
            >
              {copied ? (
                <CheckIcon className="w-5 h-5 text-white" />
              ) : (
                <ClipboardDocumentIcon className="w-5 h-5 text-white" />
              )}
            </button>
            <button
              onClick={handleDownload}
              className="p-3 bg-white/20 hover:bg-white/30 rounded-lg transition-colors"
              title="Download brief"
            >
              <ArrowDownTrayIcon className="w-5 h-5 text-white" />
            </button>
            <button
              onClick={onReset}
              className="p-3 bg-white/20 hover:bg-white/30 rounded-lg transition-colors"
              title="Generate new brief"
            >
              <ArrowPathIcon className="w-5 h-5 text-white" />
            </button>
          </div>
        </div>
      </div>

      {/* Content */}
      <div className="p-8">
        <div className="prose prose-lg max-w-none">
          <div className="bg-gray-50 rounded-lg p-6 font-mono text-sm leading-relaxed 
                        whitespace-pre-wrap max-h-[600px] overflow-y-auto">
            {content}
          </div>
        </div>

        {/* Metadata */}
        <div className="mt-6 grid grid-cols-1 md:grid-cols-3 gap-4">
          <div className="bg-blue-50 rounded-lg p-4">
            <p className="text-sm text-gray-600">Word Count</p>
            <p className="text-xl font-bold text-lexicon-primary">
              {content.split(/\s+/).length.toLocaleString()}
            </p>
          </div>
          <div className="bg-green-50 rounded-lg p-4">
            <p className="text-sm text-gray-600">Generated By</p>
            <p className="text-xl font-bold text-green-700">5 AI Agents</p>
          </div>
          <div className="bg-purple-50 rounded-lg p-4">
            <p className="text-sm text-gray-600">Timestamp</p>
            <p className="text-xl font-bold text-purple-700">
              {new Date().toLocaleTimeString()}
            </p>
          </div>
        </div>

        {/* Actions */}
        <div className="mt-8 flex flex-col sm:flex-row gap-4">
          <button
            onClick={onReset}
            className="flex-1 px-6 py-3 bg-gradient-to-r from-lexicon-primary to-lexicon-secondary 
                     text-white font-semibold rounded-lg shadow-lg hover:shadow-xl 
                     transform hover:scale-105 transition-all duration-200
                     flex items-center justify-center space-x-2"
          >
            <ArrowPathIcon className="w-5 h-5" />
            <span>Generate Another Brief</span>
          </button>
          
          <button
            onClick={handleDownload}
            className="flex-1 px-6 py-3 bg-white border-2 border-lexicon-primary
                     text-lexicon-primary font-semibold rounded-lg shadow-lg hover:shadow-xl 
                     hover:bg-lexicon-primary hover:text-white
                     transform hover:scale-105 transition-all duration-200
                     flex items-center justify-center space-x-2"
          >
            <ArrowDownTrayIcon className="w-5 h-5" />
            <span>Download as Document</span>
          </button>
        </div>
      </div>
    </motion.div>
  );
};

export default GeneratedBrief;